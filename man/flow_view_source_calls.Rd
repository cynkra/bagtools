% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/12_flow_view_source_calls.R
\name{flow_view_source_calls}
\alias{flow_view_source_calls}
\title{Draw diagram of source dependencies}
\usage{
flow_view_source_calls(
  paths = ".",
  recursive = TRUE,
  basename = TRUE,
  extension = FALSE,
  smart = TRUE,
  out = NULL
)
}
\arguments{
\item{paths}{Paths to scripts or folders containing scripts
By default explores the working directory.}

\item{recursive}{Passed to \code{list.files()} when \code{paths} contains directories}

\item{basename}{Boolean}

\item{extension}{Boolean}

\item{smart}{Whether to parse complex source calls for strings that look like script and
match those to files found in \code{paths}}

\item{out}{See {flow} functions}
}
\value{
Returns invisibly a data, called for side effects.
}
\description{
Assuming a project where file source each other, draw their dependency diagram.
This evaluates the \code{file} argument of \code{source} in the global environment,
when this fails, as it might with constructs like \code{for (file in files) source(file)}
the unevaluated argument is printed instead between backticks. Obviously this messes
up the relationships in the graph, an warning is thus issued. In a case like \verb{source(file.path(my_dir, "foo.R")}
defining \code{my_dir} will be enough to solve the issue.
In other cases you might need to attach or/and install a package.
}
